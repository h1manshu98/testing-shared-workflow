# Tf check workflow checks for min, max version , terraform fmt , terraform init & terraform validate in your terraform code.
name: tf-checks caller

on:
  workflow_call:
  # inputs can be defined to use during workflow call. 
    inputs:
      working_directory:
        description: 'Directory where compleste example exist of the module.'
        required: false
        type: string
        default: './_example/complete/'
      
      init:
        description: 'Set this to true to run terraform init'
        required: false
        type: string
        default: false 
      
      validate:
        description: 'Set this to true to run terraform validate'
        required: false
        type: string
        default: false 
      
      plan:
        description: 'Set this to true to run terraform plan'
        required: false
        type: string
        default: false 
      
      apply:
        description: 'Set this to true to run terraform apply'
        required: false
        type: string
        default: false 

jobs:
  # Terrafrom version extract as output. 
  versionExtract:
    name: Get min/max versions
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Checking terraform Max and Min version .
      - name: Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@main
        with:
          # The project root directory (.) is used as the default
          directory: ${{ inputs.working_directory }} 
    outputs:
      minVersion: ${{ steps.minMax.outputs.minVersion }}
      maxVersion: ${{ steps.minMax.outputs.maxVersion }}

  # Evaluting terraform version based on version extract.
  versionEvaluate:
    name: Evaluate Terraform versions
    runs-on: ubuntu-latest
    needs: versionExtract
    strategy:
      fail-fast: false
      matrix:
        version:
          - ${{ needs.versionExtract.outputs.minVersion }}
          - ${{ needs.versionExtract.outputs.maxVersion }}
        directory:
          - ${{ inputs.working_directory }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

     # Installing terraform version based on version extract.
      - name: Install Terraform v${{ matrix.version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.version }}

      - name: Terraform Init v${{ matrix.version }}
        if: ${{ (inputs.init == 'true') }}
        run: |
          cd ${{ matrix.directory }}
          terraform init

      - name: Terraform validate v${{ matrix.version }}
        if: ${{ (inputs.validate == 'true') }}
        run: |
          cd ${{ matrix.directory }}
          terraform validate

      - name: Terraform plan v${{ matrix.version }}
        if: ${{ (inputs.plan == 'true') }}
        run: |
          cd ${{ matrix.directory }}
          terraform plan

      - name: Terraform apply v${{ matrix.version }}
        if: ${{ (inputs.apply == 'true') && ( github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' ) && github.event_name == 'push' }}
        run: |
          cd ${{ matrix.directory }}
          terraform apply -auto-approve

  # Action to verfiy terraform formatting . 
  format:
    name: Check code format
    runs-on: ubuntu-latest
    needs: versionExtract

    steps:
       # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

     # Action added to install terraform 
      - name: Install Terraform v${{ needs.versionExtract.outputs.maxVersion }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ needs.versionExtract.outputs.maxVersion }}

      # Running command to check terraform formatting changes. 
      - name: Check Terraform format changes
        run: terraform fmt --recursive -check=true